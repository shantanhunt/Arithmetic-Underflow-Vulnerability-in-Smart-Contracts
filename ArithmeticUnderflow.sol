// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.7.5;

/**
 * @title Storage
 * @dev Underflow balances vulnerability during withdraw
 */
contract ArithmeticUnderflow {
    mapping(address => uint) public balances;

    function updateBalance(uint newBalance) public {
      balances[msg.sender] = newBalance;
   }

   function withdraw(uint _amount) public {
        require(balances[msg.sender] - _amount > 0);
        address payable to = payable(msg.sender);
        to.transfer(_amount);
        balances[msg.sender] -= _amount;
    }

    function getContractBalance() public view returns(uint256){
      return address(this).balance;
    }

    function sendEtherToSmartContract() payable public returns(uint256){
      return msg.value;
    }

    receive() external payable {
            // React to receiving ether
    }

    fallback() external payable {
            // React to receiving ether
    }

}
